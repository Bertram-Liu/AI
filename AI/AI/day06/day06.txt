1. 感知机  (神经元)
    输入n个数据, 通过权重与各数据之间的计算和, 比较激活函数结果, 得出输出
    线性回归:
      w1x1 + w2x2 +... = y
    应用:
      解决与, 或问题
      异或问题

2. 人工神经网络 (ANN)
    神经网络:
      定义:
        模仿生物神经网络的结构和功能的计算模型, 用于函数进行估计或近似
        分类:
          人工神经网络
          进阶神经网络
          深度神经网络
        感知机(神经元) >>> 神经元 (多个) >>> 神经网络
      特点:
        输入向量的维度和输入神经元的个数相同    神经元个数==输出个数==偏置(bias)
        每个连接都有权值
        同一层神经元之间没有连接
        由输入层, 隐层, 输出层组成   隐层 (多个)
        第N层与第N-1层的所有神经元连接  (全连接)  *****
      组成:
        结构
        激活函数
        学习规则  (反向传播)

3. Minst数据集浅层网络分析
    1) SoftMax 回归
        解决分类
        作用:
          计算概率
          概率值++ ==1
        交叉熵:
          衡量真实值与预测值的差异
          求所有样本的损失, 然后求平均损失
        正向传播:
          输入 >>> 计算 >>> 输出
        反向传播:
          损失计算 >>> 梯度下降 >>> 更新权重w

                          算法          策略           优化
                        线性回归       均方误差       梯度下降
                        逻辑回归     对数似然损失      梯度下降
                        神经网络       交叉熵损失   反向传播(梯度下降)
    2) 损失计算API
        单层 (全连接层) 实现手写数字识别
        - 准备数据  特征值, 目标值
        - 建立模型
           随机初始化权重和偏置
        - 计算损失 (平均样本)
        - 反向传播 (梯度下降优化)

    3) 其他方法API介绍

4. 卷积神经网络(CNN)
    结构:
      卷积层:
        定义过滤器 (观察窗口)
          大小
          步长
        结论:
          最终取决于 大小, 步长, 零填充
          移动越过图片大小:
            方案一: VALID
              不越过 (停止观察)
            方案二: SAME
              越过 (0填充)

    eg:
      卷积层: 100个Filter, 5 * 5, 步长1, padding=1

    输入体积大小 H1 * W1 * D1   [28, 28, 1]
    四个超参数:
      Filter数量: K    [100]
      Filter大小: F    [5]
      步长: S          [1]
      零填充大小: P     [1]

    输出体积大小 H2 * W2 * D2   [26, 26, 100]
      H2 = (H1-F+2P)/S + 1      H2 = (28-5 + 2*1)/1 + 1 = 26
      W2 = (W1-F+2P)/S + 1      W2 = (28-5 + 2*1)/1 + 1 = 26
      D2 = K                    D2 = 100

    激活函数: Relu (卷积)
      增加网络的非线性分割能力
      sigmoid = 1/1+e^-z
      Relu = max(0, x)

    池化层: 2*2 2步长
      特征提取, 进一步减少参数数量

    全连接层 (Full Connected)

    googlenet

    eg:
      卷积神经网络:   [None, 784]   [None, 10]
        一卷积层:
          卷积:
            32个 Filter, 5*5, strides=1, padding="SAME" 4-D, bias=32
            输入: [None, 28, 28, 1]
            输出: [None, 28, 28, 32]
          激活:
            [None, 28, 28, 32]
          池化:
            2*2, strides=2, padding="SAME"
            输入: [None, 28, 28, 32]
            输出: [None, 14, 14, 32]
        二卷积层:
          卷积:
            64个 Filter, 5*5, strides=1, padding="SAME", bias=32
            输入: [None, 14, 14, 32]
            输出: [None, 14, 14, 64]
          激活:
            [None, 14, 14, 64]
          池化:
            2*2, strides=2, padding="SAME"
            输入: [None, 14, 14, 64]
            输出: [None, 7, 7, 64]
        全连接层(FC):
          bias = 32
          [None, 7, 7, 64] * [7, 7, 64, 10]  [None, 10]
5. 卷积神经网络验证码识别
